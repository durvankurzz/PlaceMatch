{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useReducer } from 'react';\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n\n      for (const inputId in state.inputs) {\n        if (!state.inputs[inputId]) {\n          continue;\n        }\n\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n\n      return { ...state,\n        inputs: { ...state.inputs,\n          [action.inputId]: {\n            value: action.value,\n            isValid: action.isValid\n          }\n        },\n        isValid: formIsValid\n      };\n\n    case 'SET_DATA':\n      return {\n        inputs: action.inputs,\n        isValid: action.formIsValid\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n  _s();\n\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity\n  });\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: \"INPUT_CHANGE\",\n      inputId: id,\n      value: value,\n      isValid: isValid\n    });\n  }, []);\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: 'SET_DATA',\n      inputs: inputData,\n      formIsValid: formValidity\n    });\n  }, []);\n  return [formState, inputHandler, setFormData];\n};\n\n_s(useForm, \"5ScnO7wzIWRTuNy0UAC/wzvm72A=\");","map":{"version":3,"sources":["C:/Users/91762/Documents/Projects Backup/PlaceMatch/frontend/src/shared/components/hooks/form-hook.js"],"names":["useCallback","useReducer","formReducer","state","action","type","formIsValid","inputId","inputs","isValid","value","useForm","initialInputs","initialFormValidity","formState","dispatch","inputHandler","id","setFormData","inputData","formValidity"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,UAAtB,QAAwC,OAAxC;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnC,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAK,cAAL;AACE,UAAIC,WAAW,GAAG,IAAlB;;AACA,WAAK,MAAMC,OAAX,IAAsBJ,KAAK,CAACK,MAA5B,EAAoC;AAClC,YAAG,CAACL,KAAK,CAACK,MAAN,CAAaD,OAAb,CAAJ,EAA0B;AACxB;AACD;;AACD,YAAIA,OAAO,KAAKH,MAAM,CAACG,OAAvB,EAAgC;AAC9BD,UAAAA,WAAW,GAAGA,WAAW,IAAIF,MAAM,CAACK,OAApC;AACD,SAFD,MAGK;AACHH,UAAAA,WAAW,GAAGA,WAAW,IAAIH,KAAK,CAACK,MAAN,CAAaD,OAAb,EAAsBE,OAAnD;AACD;AACF;;AACD,aAAO,EACL,GAAGN,KADE;AAELK,QAAAA,MAAM,EAAE,EACN,GAAGL,KAAK,CAACK,MADH;AAEN,WAACJ,MAAM,CAACG,OAAR,GAAkB;AAAEG,YAAAA,KAAK,EAAEN,MAAM,CAACM,KAAhB;AAAuBD,YAAAA,OAAO,EAAEL,MAAM,CAACK;AAAvC;AAFZ,SAFH;AAMLA,QAAAA,OAAO,EAAEH;AANJ,OAAP;;AASA,SAAK,UAAL;AACA,aAAO;AACLE,QAAAA,MAAM,EAAGJ,MAAM,CAACI,MADX;AAELC,QAAAA,OAAO,EAAEL,MAAM,CAACE;AAFX,OAAP;;AAKF;AACE,aAAOH,KAAP;AA/BJ;AAiCD,CAlCH;;AAoCA,OAAO,MAAMQ,OAAO,GAAG,CAACC,aAAD,EAAeC,mBAAf,KAAsC;AAAA;;AAC3D,QAAM,CAACC,SAAD,EAAYC,QAAZ,IAAwBd,UAAU,CAACC,WAAD,EAAc;AACpDM,IAAAA,MAAM,EAAEI,aAD4C;AAEpDH,IAAAA,OAAO,EAAEI;AAF2C,GAAd,CAAxC;AAKA,QAAMG,YAAY,GAAGhB,WAAW,CAAC,CAACiB,EAAD,EAAKP,KAAL,EAAYD,OAAZ,KAAwB;AACvDM,IAAAA,QAAQ,CAAC;AACPV,MAAAA,IAAI,EAAM,cADH;AAEPE,MAAAA,OAAO,EAAGU,EAFH;AAGPP,MAAAA,KAAK,EAAKA,KAHH;AAIPD,MAAAA,OAAO,EAAGA;AAJH,KAAD,CAAR;AAOD,GAR+B,EAQ7B,EAR6B,CAAhC;AAUA,QAAMS,WAAW,GAAGlB,WAAW,CAAC,CAACmB,SAAD,EAAWC,YAAX,KAA2B;AACzDL,IAAAA,QAAQ,CAAC;AACTV,MAAAA,IAAI,EAAS,UADJ;AAETG,MAAAA,MAAM,EAAOW,SAFJ;AAGTb,MAAAA,WAAW,EAAEc;AAHJ,KAAD,CAAR;AAKD,GAN8B,EAM5B,EAN4B,CAA/B;AAQA,SAAO,CAACN,SAAD,EAAWE,YAAX,EAAwBE,WAAxB,CAAP;AAED,CA1BM;;GAAMP,O","sourcesContent":["import { useCallback, useReducer } from 'react';\r\n\r\nconst formReducer = (state, action) => {\r\n    switch (action.type) {\r\n      \r\n      case 'INPUT_CHANGE':\r\n        let formIsValid = true;\r\n        for (const inputId in state.inputs) {\r\n          if(!state.inputs[inputId]){\r\n            continue;\r\n          }\r\n          if (inputId === action.inputId) {\r\n            formIsValid = formIsValid && action.isValid;\r\n          }\r\n          else {\r\n            formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n          }\r\n        }\r\n        return {\r\n          ...state,\r\n          inputs: {\r\n            ...state.inputs,\r\n            [action.inputId]: { value: action.value, isValid: action.isValid }\r\n          },\r\n          isValid: formIsValid\r\n        };\r\n\r\n        case 'SET_DATA':\r\n        return {\r\n          inputs  :action.inputs,\r\n          isValid :action.formIsValid\r\n        }\r\n\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n\r\nexport const useForm = (initialInputs,initialFormValidity) =>{\r\n  const [formState, dispatch] = useReducer(formReducer, {\r\n    inputs :initialInputs ,\r\n    isValid: initialFormValidity\r\n  });\r\n\r\n  const inputHandler = useCallback((id, value, isValid) => {\r\n    dispatch({\r\n      type    : \"INPUT_CHANGE\",\r\n      inputId : id,\r\n      value   : value,\r\n      isValid : isValid,\r\n\r\n    });\r\n  }, []);\r\n\r\n  const setFormData = useCallback((inputData,formValidity) =>{\r\n    dispatch({\r\n    type        :'SET_DATA',\r\n    inputs      :inputData,\r\n    formIsValid :formValidity\r\n  });\r\n  }, []);\r\n\r\n  return [formState,inputHandler,setFormData]\r\n    \r\n};"]},"metadata":{},"sourceType":"module"}