{"ast":null,"code":"var _jsxFileName = \"C:\\\\ReactProjects\\\\PlaceMatch\\\\frontend\\\\src\\\\shared\\\\components\\\\FormElement\\\\Input.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from \"react\";\nimport { validate } from '../../components/util/validators';\nimport \"./Input.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return { ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators)\n      };\n\n    case 'TOUCH':\n      {\n        return { ...state,\n          isTouched: true\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst Input = props => {\n  _s();\n\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: \"\",\n    isTouched: false,\n    isValid: false\n  });\n\n  const changeHandler = event => {\n    dispatch({\n      type: \"CHANGE\",\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: \"TOUCH\"\n    });\n  };\n\n  const element = props.element === `input` ? /*#__PURE__*/_jsxDEV(\"input\", {\n    id: props.id,\n    type: props.type,\n    placeholder: props.placeholder,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 7\n  }, this) : /*#__PURE__*/_jsxDEV(\"textarea\", {\n    id: props.id,\n    rows: props.rows || 3,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 7\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `form-control ${!inputState.isValid && inputState.isTouched && \"form-control--invalid\"}`,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: props.id,\n      children: props.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), element, !inputState.isValid && inputState.isTouched && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: props.errorText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 55\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Input, \"cjCZYCeVcqIsXMwKLbOLzzANTss=\");\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["C:/ReactProjects/PlaceMatch/frontend/src/shared/components/FormElement/Input.js"],"names":["React","useReducer","validate","inputReducer","state","action","type","value","val","isValid","validators","isTouched","Input","props","inputState","dispatch","changeHandler","event","target","touchHandler","element","id","placeholder","rows","label","errorText"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,UAAd,QAA+B,OAA/B;AAEA,SAASC,QAAT,QAAyB,kCAAzB;AACA,OAAO,aAAP;;;AAEA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAOC,MAAP,KAAgB;AACnC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,QAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELG,QAAAA,KAAK,EAACF,MAAM,CAACG,GAFR;AAGLC,QAAAA,OAAO,EAAEP,QAAQ,CAACG,MAAM,CAACG,GAAR,EAAaH,MAAM,CAACK,UAApB;AAHZ,OAAP;;AAMF,SAAK,OAAL;AAAa;AACX,eAAO,EACL,GAAGN,KADE;AAELO,UAAAA,SAAS,EAAE;AAFN,SAAP;AAID;;AACD;AACE,aAAOP,KAAP;AAfJ;AAiBD,CAlBD;;AAoBA,MAAMQ,KAAK,GAAIC,KAAD,IAAW;AAAA;;AACvB,QAAM,CAACC,UAAD,EAAaC,QAAb,IAAyBd,UAAU,CAACE,YAAD,EAAe;AACtDI,IAAAA,KAAK,EAAE,EAD+C;AAEtDI,IAAAA,SAAS,EAAC,KAF4C;AAGtDF,IAAAA,OAAO,EAAE;AAH6C,GAAf,CAAzC;;AAMA,QAAMO,aAAa,GAAIC,KAAD,IAAW;AAE/BF,IAAAA,QAAQ,CAAC;AACPT,MAAAA,IAAI,EAAE,QADC;AAEPE,MAAAA,GAAG,EAAES,KAAK,CAACC,MAAN,CAAaX,KAFX;AAGPG,MAAAA,UAAU,EAAEG,KAAK,CAACH;AAHX,KAAD,CAAR;AAKD,GAPD;;AASA,QAAMS,YAAY,GAAG,MAAM;AACzBJ,IAAAA,QAAQ,CAAC;AACPT,MAAAA,IAAI,EAAC;AADE,KAAD,CAAR;AAGD,GAJD;;AAMA,QAAMc,OAAO,GACXP,KAAK,CAACO,OAAN,KAAmB,OAAnB,gBACE;AACE,IAAA,EAAE,EAAEP,KAAK,CAACQ,EADZ;AAEE,IAAA,IAAI,EAAER,KAAK,CAACP,IAFd;AAGE,IAAA,WAAW,EAAEO,KAAK,CAACS,WAHrB;AAIE,IAAA,QAAQ,EAAEN,aAJZ;AAKE,IAAA,MAAM,EAAEG,YALV;AAME,IAAA,KAAK,EAAEL,UAAU,CAACP;AANpB;AAAA;AAAA;AAAA;AAAA,UADF,gBAUE;AACE,IAAA,EAAE,EAAEM,KAAK,CAACQ,EADZ;AAEE,IAAA,IAAI,EAAER,KAAK,CAACU,IAAN,IAAc,CAFtB;AAGE,IAAA,QAAQ,EAAEP,aAHZ;AAIE,IAAA,MAAM,EAAEG,YAJV;AAKE,IAAA,KAAK,EAAEL,UAAU,CAACP;AALpB;AAAA;AAAA;AAAA;AAAA,UAXJ;AAoBA,sBACE;AACE,IAAA,SAAS,EAAG,gBAAe,CAACO,UAAU,CAACL,OAAZ,IAAuBK,UAAU,CAACH,SAAlC,IAA+C,uBACvE,EAFL;AAAA,4BAIE;AAAO,MAAA,OAAO,EAAEE,KAAK,CAACQ,EAAtB;AAAA,gBAA2BR,KAAK,CAACW;AAAjC;AAAA;AAAA;AAAA;AAAA,YAJF,EAKGJ,OALH,EAMG,CAACN,UAAU,CAACL,OAAZ,IAAuBK,UAAU,CAACH,SAAlC,iBAA+C;AAAA,gBAAIE,KAAK,CAACY;AAAV;AAAA;AAAA;AAAA;AAAA,YANlD;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CApDD;;GAAMb,K;;KAAAA,K;AAsDN,eAAeA,KAAf","sourcesContent":["import React,{useReducer} from \"react\";\r\n\r\nimport { validate } from '../../components/util/validators';\r\nimport \"./Input.css\";\r\n\r\nconst inputReducer = (state,action)=>{\r\n  switch (action.type){\r\n    case 'CHANGE':\r\n      return {\r\n        ...state,\r\n        value:action.val,\r\n        isValid: validate(action.val ,action.validators)\r\n      };\r\n\r\n    case 'TOUCH':{\r\n      return {\r\n        ...state,\r\n        isTouched: true\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst Input = (props) => {\r\n  const [inputState, dispatch] = useReducer(inputReducer, {\r\n    value: \"\",\r\n    isTouched:false,\r\n    isValid: false,\r\n  });\r\n\r\n  const changeHandler = (event) => {\r\n\r\n    dispatch({\r\n      type: \"CHANGE\",\r\n      val: event.target.value,\r\n      validators: props.validators,\r\n    });\r\n  };\r\n\r\n  const touchHandler = () => {\r\n    dispatch({\r\n      type:\"TOUCH\"\r\n    });\r\n  };\r\n\r\n  const element =\r\n    props.element === `input` ? (\r\n      <input\r\n        id={props.id}\r\n        type={props.type}\r\n        placeholder={props.placeholder}\r\n        onChange={changeHandler}\r\n        onBlur={touchHandler}\r\n        value={inputState.value}\r\n      />\r\n    ) : (\r\n      <textarea\r\n        id={props.id}\r\n        rows={props.rows || 3}\r\n        onChange={changeHandler}\r\n        onBlur={touchHandler}\r\n        value={inputState.value}\r\n      />\r\n    );\r\n\r\n  return (\r\n    <div\r\n      className={`form-control ${!inputState.isValid && inputState.isTouched && \"form-control--invalid\"\r\n        }`}\r\n    >\r\n      <label htmlFor={props.id}>{props.label}</label>\r\n      {element}\r\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n"]},"metadata":{},"sourceType":"module"}